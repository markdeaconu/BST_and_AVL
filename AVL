''' Code taken from CISC 235 at queen's university'''
class AVL_Tree():
    '''
    Class of a self balancing Bst/ AVL tree

    Taken from the Lecture slides of Cisc 235 at Queen's university
    '''
    def __init__(self, head):
        self.head = head 
        self.total_height =0
# Recursive function to insert key in subtree rooted with node and returns new root of subtree.
    def insert(self, root, key, freq):
        # Step 1 - Perform normal BST
        if not root:
            return TreeNode(key,freq)
        elif key < root.val:
            root.left = self.insert(root.left, key, freq)
        else:
            root.right = self.insert(root.left, key, freq )
            # Step 2 - Update the height of the ancestor node
            root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right))
            # Step 3 - Get the balance factor
            balance = self.getBalance(root)
            # Step 4 - If the node is unbalanced, then try out the 4 cases
            if balance < -1 and key < root.left.val:
                return self.rightRotate(root)
                # Case 2 - Right Right
            if balance > 1 and key > root.right.val:
                return self.leftRotate(root)
                # Case 3 - Left Right
            if balance < -1 and key > root.left.val:
                root.left = self.leftRotate(root.left)
                return self.rightRotate(root)
                # Case 4 - Right Left
            if balance > 1 and key < root.right.val:
                root.right = self.rightRotate(root.right)
                return self.leftRotate(root)
        
        return root
    
    def update_height(self, height_added):
        self.total_height += height_added
    
    def getHeight(self, node):
        if node!= None:
            node.height_helper(1, self)
            temp_height = self.total_height
            self.total_height = 0
            print(temp_height)
            return temp_height
        return 0

    def getBalance(self, T):
        return(self.getHeight(T.right) - self.getHeight(T.left))


    def rightRotate(self, B):
        A= B.left
        beta = A.right
        # Perform rotation
        A.right = B
        B.left = beta
        # Update heights
        B.height = 1 + max(self.getHeight(B.left),
        self.getHeight(B.right))
        A.height = 1 + max(self.getHeight(A.left),
        self.getHeight(A.right))
        # Return the new root
        return A
    
    def leftRotate(self, A):
        B = A.right
        beta = B.left
        # Perform rotation
        B.left = A
        A.right = beta
        # Update heights
        A.height = 1 + max(self.getHeight(A.left),
        self.getHeight(A.right))
        B.height = 1 + max(self.getHeight(B.left),
        self.getHeight(B.right))
        # Return the new root
        return B


# Generic tree node class
class TreeNode(object):
    '''
    Class of a node in an AVL tree

    Taken from the Lecture slides of Cisc 235 at Queen's university
    '''
    
    def __init__(self, val, freq=0):
        self.val = val
        self.freq = freq
        self.left = None
        self.right = None
        self.height = 0

    def height_helper(self, height, bst):
        '''
        Recursively traverses through the bst and adds it's own height to the height attribute of the bst 
        '''
        bst.update_height(height)
        if self.left != None:
            self.left.height_helper(height+1, bst)
        if self.right!= None:
            self.right.height_helper(height+1, bst)
